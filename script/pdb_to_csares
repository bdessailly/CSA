#!/usr/bin/env perl

######################################################################
##
##    Gets a list of PDB IDs as input and output the PDB IDs together 
##    with their CSA residues (Residue Position + Chain ID).
##
##    Created by Benoit H Dessailly, 2011-05-23.
##    Updated, 2011-05-23.
##    Updated, 2011-05-24.
##
######################################################################

use strict;
use warnings;

use File::Basename;
use File::Spec;
use Getopt::Std;
use IO::File;

use AminoAcid::Alphabet;
use CSA::IO;


## Default location for CSA dataset file.
my $csa_dataset_file = File::Spec->catfile( 
    $ENV{HOME},
    'data',
    'csa',
    'csa_latest.dat',
);

## cmd line args.
my %arg;
getopts( 'hi:d:o:prl', \%arg );
&help if ( defined $arg{'h'} );
die "Pass input file with list of PDB IDs with -i\n" 
    unless ( defined $arg{'i'} );
die "Pass output file with -o\n" unless ( defined $arg{'o'} );
$arg{'d'} = ( defined $arg{'d'} ) ? $arg{'d'} : $csa_dataset_file;
my $protein_only       = ( defined $arg{'p'} ) ? 1 : 0;
my $redundancy_allowed = ( defined $arg{'r'} ) ? 1 : 0;
my $literature_only    = ( defined $arg{'l'} ) ? 1 : 0;

## Read CSA dataset.
my $csa = read_csa_dataset( $arg{'d'} ); 

## Output list of CSA residues in input PDB entries.
output_csa_residues( 
    $arg{'i'}, 
    $arg{'o'}, 
    $protein_only, 
    $redundancy_allowed, 
    $literature_only,
    $csa 
);

exit;


######################################################################
## Output usage message.
sub help {
    my $script = basename $0;
    
    print <<"END_USAGE";
    
  Usage: $script [Options]
  
  Options:
  
    -h                    Output usage message.
    
    -i filename           Input file with list of PDB IDs.
                          Required
                          
    -d filename           CSA dataset file.
                          Default: \${HOME}/data/csa/csa_latest.dat

    -o filename           Output file name.
                          Required

    -p                    Output only CSA residues whose type is one 
                          of the twenty regular protein amino acids.
                          Optional

    -l                    Output only CSA residues that are part of 
                          a site identified by literature search 
                          (i.e. exclude all sites identified by 
                          PSI-Blast comparison).
                          Optional

    -r                    Switch to allow the same CSA residue to be
                          printed multiple times in the output. There 
                          are cases in the CSA where the same residue
                          is part of several sites in the same PDB 
                          entry. Normally, such residues are printed
                          only once in the output of $script, 
                          but this behaviour can be changed with this 
                          option.
                          Optional

  Gets a list of PDB IDs as input and output their CSA residues
  (Residue Position + Chain ID).

END_USAGE
    
    exit;
}

######################################################################
## Read CSA dataset in CSA object.
sub read_csa_dataset {
    my $f_csa = shift;

    my $csa_io = CSA::IO->new();
    my $fh_csa = IO::File->new( $f_csa, '<' );
    my $csa    = $csa_io->read( csa_filehandle => $fh_csa );

    return $csa;
}

######################################################################
## Read input list of PDB IDs and output CSA residues for each of 
## them.
sub output_csa_residues {
    my $f_inp              = shift;
    my $f_out              = shift;
    my $protein_only       = shift;
    my $redundancy_allowed = shift;
    my $literature_only    = shift;
    my $csa                = shift;
    
    my $fh_pdblist = IO::File->new( $f_inp, '<' );
    my $fh_out     = IO::File->new( $f_out, '>' );
    while ( my $line = $fh_pdblist->getline ) {
        chomp( my $pdbid = $line );
    
        my $entry = $csa->get_entry( $pdbid );

        ## Get all CSA residues.
        my %csa_residues;
        if ( defined $entry ) {
            for my $site ( @{ $entry->sites } ) {

                ## If only considering literature-based sites...
                next if ( 
                       $literature_only 
                    && ( $site->evidence ne 'LIT' ) 
                );

                for my $res ( @{ $site->residues } ) {

                    ## If only considering protein residues...
                    my $is_standard 
                        = is_aacode_standard( $res->residue_type );
                    next if ( $protein_only && ! $is_standard );
                    
                    my $res_uid = $res->residue_number
                                . $res->chain_id
                    ;
                    $csa_residues{ $res_uid }++;
                }
            }
        }
        
        ## Print out CSA residues.
        if ( scalar keys %csa_residues > 0 ) {
            
            if ( $redundancy_allowed ) {
                print_csa_with_redundancy( 
                    $fh_out, 
                    $pdbid, 
                    \%csa_residues 
                );
            }
            else {
                for my $csa_res ( sort keys %csa_residues ) {
                    print $fh_out $pdbid, "\t", $csa_res, "\n";
                }
            }
        }
        else {
            warn "No CSA residues found for $pdbid\n";
        }
    }
    
    $fh_pdblist->close;
    $fh_out->close;
}

#####################################################################
## Print CSA residues to output and allow same residue to be printed
## multiple times when required.
sub print_csa_with_redundancy {
    my $fh_out            = shift;
    my $pdbid             = shift;
    my $csa_residues_href = shift;
    
    while ( my( $csa_res, $nocc ) = each %{ $csa_residues_href } ) {
        for ( 1..$nocc ) {
            print $fh_out $pdbid, "\t", $csa_res, "\n";
        }
    }
}